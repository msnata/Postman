{
	"info": {
		"_postman_id": "08458d67-e4da-4d42-a703-5da5dd7088c5",
		"name": "HW_2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20722694"
	},
	"item": [
		{
			"name": "HW_2_Task1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Type of var\", function() {\r",
							"    pm.expect(pm.response.text()).to.be.a(\"String\")\r",
							"     // pm.expect(tt2.salary).to.eql(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_2_Task2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let resp_name = jsonData.name\r",
							"let name_s = \"Natali\"\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(name_s);\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let resp_age = jsonData.age\r",
							"let age_s = \"46\"\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(resp_age).to.eql(age_s);\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let resp_salary = jsonData.salary\r",
							"let salary_s = 1500\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(salary_s);\r",
							"});\r",
							"\r",
							"//7. Спарсить request\r",
							"let req = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.\r",
							"let req_name = req.name;\r",
							"pm.test(\"check name from request\", function () {\r",
							"pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"//let req_age = req.age;\r",
							"pm.test(\"check age from request\", function () {\r",
							"    pm.expect(req.age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req.salary;\r",
							"pm.test(\"check salary from request\", function () {\r",
							"    pm.expect(+req_salary).to.eql(jsonData.salary);\r",
							"});\r",
							"// console.log(\"req_salary = \", req_salary)\r",
							"// console.log(\"jsonData.salary = \", jsonData.salary)\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_4 = req_salary * 4\r",
							"let salary_1_5 = jsonData.family.u_salary_1_5_year\r",
							"pm.test(\"check salary 1.5\", function () {\r",
							"pm.expect(salary_4).to.eql(salary_1_5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Natali",
							"type": "text"
						},
						{
							"key": "age",
							"value": "46",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_2_Task3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"2. Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let resp_name = jsonData.name;\r",
							"let req_name = req.name;\r",
							"pm.test(\"5. check name from request\", function () {\r",
							"pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let resp_age = jsonData.age;\r",
							"let req_age = req.age;\r",
							"// console.log(\"1 = \", resp_age)\r",
							"// console.log(\"2 = \", req_age)\r",
							"pm.test(\"6. check age from request\", function () {\r",
							"pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let resp_salary = jsonData.salary;\r",
							"let req_salary = req.salary;\r",
							"// console.log(\"1 = \", resp_salary)\r",
							"// console.log(\"2 = \", req_salary)\r",
							"pm.test(\"7. check salary from request\", function () {\r",
							"pm.expect(+req_salary).to.eql(resp_salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"9. Dog have name\", function() {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"10. Dog have age\", function() {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"11. name is Luky\", function() {\r",
							"    pm.expect(jsonData.family.pets.dog).to.deep.include({\"name\": \"Luky\"})\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"12. age is 4\", function() {\r",
							"    pm.expect(jsonData.family.pets.dog).to.deep.include({\"age\": 4})\r",
							"//pm.globals.set(\"variable_key\", \"variable_value\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Natali&age=46&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Natali"
						},
						{
							"key": "age",
							"value": "46"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_2_Task4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"2. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let resp_name = jsonData.name\r",
							"let req_name = req.name\r",
							"pm.test(\"5. name in body equal name in request\", function () {\r",
							"pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let resp_age = jsonData.age\r",
							"let req_age = req.age\r",
							"pm.test(\"6. age in body equal age in request\", function () {\r",
							"pm.expect(+req_age).to.eql(resp_age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"8. salary from response \", jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"9. salary0 from response \", jsonData.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"10. salary1 from response \", jsonData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"11. salary2 from response\", jsonData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"12. salary_0 equal salary from request\", function () {\r",
							"pm.expect(+req.salary).to.eql(jsonData.salary[0])\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"13. salary_1 equal salary from request\", function () {\r",
							"pm.expect(req.salary*2).to.eql(+jsonData.salary[1])\r",
							"//console.log(req.salary*2)\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"14. salary_2 equal salary from request\", function () {\r",
							"pm.expect(req.salary*3).to.eql(+jsonData.salary[2])\r",
							"//console.log(req.salary*3)\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"//console.log(jsonData.name);\r",
							"\r",
							"// 15. Создать в окружении переменную name и добавить значение\r",
							"// pm.environment.set(\"name\", jsonData.name);\r",
							"// //console.log(jsonData.name);\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\");\r",
							"//console.log(jsonData.age);\r",
							"\r",
							"// // 16. Создать в окружении переменную age и добавить значение\r",
							"// pm.environment.set(\"age\", jsonData.age);\r",
							"// //console.log(jsonData.age);\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\");\r",
							"//console.log(jsonData.salary);\r",
							"\r",
							"// // 17. Создать в окружении переменную salary и добавить значение\r",
							"// pm.environment.set(\"salary\", jsonData.salary);\r",
							"// //console.log(jsonData.salary);\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", req.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for(let i=0; i<3; i++){\r",
							"    console.log(jsonData.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Natali&age=46&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Natali"
						},
						{
							"key": "age",
							"value": "46"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_2_Task5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1.Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"5. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"8. start_qa_salary\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"9. qa_salary_after_6_months\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"10. qa_salary_after_12_months\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"11. qa_salary_after_1.5_year\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"12. qa_salary_after_3.5_years\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"13. has property person\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"person\")\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"14. start_qa_salary equal salary from request\", function () {\r",
							"pm.expect(+req.salary).to.eql(jsonData.start_qa_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"15. start_qa_salary equal salary*2 from request\", function () {\r",
							"pm.expect(+(req.salary*2)).to.eql(jsonData.qa_salary_after_6_months);\r",
							"//console.log(req.salary*2)\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"16. qa_salary_after_12_months equal salary*2.7 from request\", function () {\r",
							"pm.expect(+(req.salary*2.7)).to.eql(jsonData.qa_salary_after_12_months);\r",
							"//console.log(req.salary*2.7)\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"17. qa_salary_after_1.5_year equal salary*3.3 from request\", function () {\r",
							"pm.expect(+(req.salary*3.3)).to.eql(jsonData[\"qa_salary_after_1.5_year\"]);\r",
							"//console.log(req.salary * 3.3)\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"18. qa_salary_after_3.5_years equal salary*3.8 from request\", function () {\r",
							"pm.expect(+(req.salary*3.8)).to.eql(jsonData[\"qa_salary_after_3.5_years\"]);\r",
							"console.log(req.salary * 3.8)\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен name из request (salary забрать из request.)\r",
							"pm.test(\"19.item_1 u_name equal salary from request\", function () {\r",
							"pm.expect(+req.salary).to.eql(jsonData.person.u_name[1]);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"20. u_age equql age from request\", function () {\r",
							"pm.expect(+req.age).to.eql(jsonData.person.u_age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"21. salary*4.2 equal u_salary_5_years from request\", function () {\r",
							"pm.expect(+(req.salary*4.2)).to.eql(jsonData.person.u_salary_5_years);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let key in jsonData.person) {\r",
							"  console.log(\"элемент списка из параметра person \" + key + \"= \" + jsonData.person[key]);\r",
							"  //console.log(jsonData.person[key]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Natali",
							"type": "text"
						},
						{
							"key": "age",
							"value": "46",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	]
}